#if USE_FDK == 1
AnyBodyStudy InitStudy =
{
  AnyObjectPtrArray pArr_TFJnt = 
  ObjSearchRecursive("Main.HumanModel.BodyModel.Right.Leg.Jnt", "Knee", "AnyMechObject");  
  AnyObjectPtrArray pArr_TFJnt_Re = 
  ObjSearchRecursive("Main.HumanModel.BodyModel.Right.Leg.Jnt.Knee", "*", "AnyMechObject");   
  AnyObjectPtrArray pArr_TFJntDrv = 
  ObjSearchRecursive("Main.Model.ModelEnvironmentConnection.Drivers", "KneeDriver*", "AnyMechObject");
  AnyObjectPtrArray pArr_TFJntDrv_Re = 
  ObjSearchRecursive("Main.Model.ModelEnvironmentConnection.Drivers.KneeDriverRight", "*", "AnyMechObject");
  
  AnyObjectPtrArray pArr_PFJnt = 
  ObjSearchRecursive("Main.HumanModel.BodyModel.Right.Leg.Jnt", "PatellaFemur", "AnyMechObject");
  AnyObjectPtrArray pArr_PFJnt_Re = 
  ObjSearchRecursive("Main.HumanModel.BodyModel.Right.Leg.Jnt.PatellaFemur", "*", "AnyMechObject"); 
  AnyObjectPtrArray pArr_PatellaTendon = 
  ObjSearchRecursive("Main.HumanModel.BodyModel.Right.Leg.Jnt", "PatellaMovement", "AnyMechObject");
  AnyObjectPtrArray pArr_PatellaTendon_Re = 
  ObjSearchRecursive("Main.HumanModel.BodyModel.Right.Leg.Jnt.PatellaMovement", "*", "AnyMechObject");
  
  AnyObjectPtrArray pArr_Mus = 
  ObjSearchRecursive("Main.HumanModel.BodyModel.Right.Leg.Mus", "*", "AnyMechObject");
  
  AnyObjectPtrArray pArr_Knee = arrcat(
  arrcat(pArr_TFJnt, pArr_TFJnt_Re, pArr_TFJntDrv, pArr_TFJntDrv_Re),
  arrcat(pArr_PFJnt, pArr_PFJnt_Re, pArr_PatellaTendon, pArr_PatellaTendon_Re)
  );
  
  MechObjectExclude = arrcat(pArr_Knee, pArr_Mus) ;    
  
  AnyFolder& Parameters = .Parameters;
  AnyFolder& Model = .Model;
  AnyFolder Drivers_Init = 
  {
    AnyKinEqSimpleDriver TibioFemoral_Lin = 
    {
      AnyKinLinear lin = 
      {
        AnyRefFrame & ref0 = REF_HUMAN_BODYMODEL.Right.Leg.Seg.Thigh.PatientRefNode;
        AnyRefFrame & ref1 = REF_HUMAN_BODYMODEL.Right.Leg.Seg.Shank.PatientRefNode;
        Ref = 0;
      };
      DriverPos = DEF_CUSTOM_JOINT_INIT_OFFSET_TIBIOFEMORAL_LIN;
      DriverVel = {0, 0, 0};
      Reaction.Type = {Off, Off, Off};
    };
    AnyKinEqSimpleDriver TibioFemoral_Rot = 
    {
      AnyKinRotational rot = 
      {
        AnyRefFrame & ref0 = REF_HUMAN_BODYMODEL.Right.Leg.Seg.Thigh.PatientRefNode;
        AnyRefFrame & ref1 = REF_HUMAN_BODYMODEL.Right.Leg.Seg.Shank.PatientRefNode;
        Type = PlanarAngles;
      };
      DriverPos = DEF_CUSTOM_JOINT_INIT_OFFSET_TIBIOFEMORAL_ROT;
      DriverVel = {0, 0, 0};
      Reaction.Type = {Off, Off, Off};      
    };
    
    AnyKinEqSimpleDriver PatelloFemoral_Lin = 
    {
      AnyKinLinear lin = 
      {
        AnyRefFrame & ref0 = REF_HUMAN_BODYMODEL.Right.Leg.Seg.Thigh.PatientRefNode;
        AnyRefFrame & ref1 = REF_HUMAN_BODYMODEL.Right.Leg.Seg.Patella.PatientRefNode;
        Ref = 0;
      };
      DriverPos = DEF_CUSTOM_JOINT_INIT_OFFSET_PATELLOFEMORAL_LIN;
      DriverVel = {0, 0, 0};
      Reaction.Type = {Off, Off, Off};
    };
    AnyKinEqSimpleDriver PatelloFemoral_Rot = 
    {
      AnyKinRotational rot = 
      {
        AnyRefFrame & ref0 = REF_HUMAN_BODYMODEL.Right.Leg.Seg.Thigh.PatientRefNode;
        AnyRefFrame & ref1 = REF_HUMAN_BODYMODEL.Right.Leg.Seg.Patella.PatientRefNode;
        Type = PlanarAngles;
      };
      DriverPos = DEF_CUSTOM_JOINT_INIT_OFFSET_PATELLOFEMORAL_ROT;
      DriverVel = {0, 0, 0};
      Reaction.Type = {Off, Off, Off};      
    };    
  };
  
  InitialConditions.SmallStepAssumptionOnOff = Off;
  Kinematics.SmallStepAssumptionOnOff = Off;
  
  Gravity = {0, -9.81, 0};
  tStart = 0.0 ;
  tEnd = 1.0 ;
  nStep = 1 ;
  AnyFolder OutputFunctions_Length = {};
};  

AnyDesEvalStudy EvalStudy = 
{
  Analysis =
  {
    AnyOperation& RunInit = ..InitStudy.Kinematics;
  }; 
};

AnyOperationSequence LigamentCalibrationSequence = 
{
  AnyOperation& EvaluateLigamentLengths = Main.EvalStudy.UpdateDesign;
  AnyOperationMacro UpdateValues = 
  {
    MacroStr = 
    {
      "classoperation Main" + strquote("Update Values")
    };
  };  
};
#endif

AnyBodyStudy Study = 
{
  AnyFolder &Model = .Model;  
  Gravity={0.0, -9.81, 0.0};
  tEnd = ADL_SQUAT_TIME_PERIOD;
  nStep = round(ADL_SQUAT_TIME_PERIOD*ADL_SQUAT_FRAMES_PER_SECOND+1);
  
  Kinematics.MaxIteration = 50000;
  InitialConditions.MaxIteration = Kinematics.MaxIteration; 
  InverseDynamics.Criterion.Power = DEF_MUSCLE_RECRUITMENT_CRITERION_POWER;
  InverseDynamics.Criterion.PrimaryTerm.Weight_SearchName = "WeightFactor";
  
  #if (BM_LEG_MUSCLES_RIGHT != OFF) & (BM_LEG_MUSCLES_LEFT != OFF)
   AnyObjectPtr pArrExcludedMuscles = arrcat
   (
     Main.HumanModel.BodyModel.Right.Leg.Mus.ExcludedMuscles.Objects,
     Main.HumanModel.BodyModel.Left.Leg.Mus.ExcludedMuscles.Objects
   );  
   MechObjectExclude = pArrExcludedMuscles;
  #endif
  
  #if USE_FDK == 1  
   InverseDynamics.ForceDepKinOnOff=On;
   InverseDynamics.ForceDepKin.SolverType = FDK_SolverType ;
   InverseDynamics.ForceDepKin.ForceTol = FDK_ForceTol ;
   InverseDynamics.ForceDepKin.Perturbation = FDK_Perturbation;
   InverseDynamics.ForceDepKin.MaxIteration = FDK_MaxIteration;
   InverseDynamics.ForceDepKin.MaxNewtonStep = FDK_MaxNewtonStep;       
   InverseDynamics.ForceDepKin.LocalSearchOnOff = FDK_LocalSearchOnOff;      
   InverseDynamics.ForceDepKin.UseAdaptiveForceTolOnOff = FDK_UseAdaptiveForceTolOnOff ;
   
   AnyFolder ExtraDrivers = {};
   
   #ifdef USE_FDK_TIBIOFEMORAL
    Main.HumanModel.BodyModel.Right.Leg.Jnt.Knee = 
    {
      Constraints.CType  = {ForceDep, ForceDep, ForceDep, ForceDep, ForceDep};
      Constraints.Reaction.Type = {Off, Off, Off, Off, Off};
    };    
   #endif
   
   #ifdef USE_FDK_PATELLOFEMORAL 
//     AnyMechObjectExcluder Excluder_Jnt_PatellaFemoral = 
//     {
//       Objects = 
//       {
//         &Main.HumanModel.BodyModel.Right.Leg.Jnt.PatellaFemur.Constraints,
//         &Main.HumanModel.BodyModel.Right.Leg.Jnt.PatellaFemur.Constraints.Reaction
//       };      
//     };
//     ExtraDrivers = 
//     {
//       AnyKinEqSimpleDriver PatelloFemoral_Lin = 
//       {
//         AnyKinLinear lin = 
//         {
//           AnyRefFrame & ref0 = REF_HUMAN_BODYMODEL.Right.Leg.Seg.Thigh.PatientRefNode;
//           AnyRefFrame & ref1 = REF_HUMAN_BODYMODEL.Right.Leg.Seg.Patella.PatientRefNode;
//           Ref = 0;
//         };
//         DriverPos = DEF_CUSTOM_JOINT_INIT_OFFSET_PATELLOFEMORAL_LIN;
//         DriverVel = {0, 0, 0};
//         Reaction.Type = {Off, Off, Off};
//         CType  = {ForceDep, ForceDep, ForceDep};
//       };       
//       AnyKinEqSimpleDriver PatelloFemoral_Rot = 
//       {
//         AnyKinMeasure &Orientation = REF_HUMAN_BODYMODEL.Right.Leg.Jnt.PatellaFemur.Orientation;
//         MeasureOrganizer = {1, 2};
//         DriverPos = {0, 0};
//         DriverVel = {0, 0};
//         CType  = {ForceDep, ForceDep};
//         Reaction.Type = {Off, Off};
//       };//Patellafemur          
//     };
    Main.HumanModel.BodyModel.Right.Leg.Jnt.PatellaFemur = 
    {
      Constraints.CType  = {ForceDep, ForceDep, ForceDep, ForceDep, ForceDep};
      Constraints.Reaction.Type = {Off, Off, Off, Off, Off};    
    };
   #endif
  
  #endif
};

/**Execute this operation to run the model in the intended operation sequence.  
It is also possible to run operations seperately, by manual selections in the operation tree*/
AnyOperationSequence RunApplication = 
{  
  #if USE_FDK == 1
  AnyOperation& LigamentCalibrationSequence = .LigamentCalibrationSequence;
  #endif
  
  /*This operation calibrates the muscles in the model if these are of the type AnyMuscleModel3E.
  This will just be an empty operation if the model is using a muscle type that does not require calibration.*/  
  AnyOperation &CalibrationAnal = Main.HumanModel.Calibration.CalibrationSequence;    
  
  ///This operation is the inverse dynamic analysis
  AnyOperation &InvAnal=Main.Study.InverseDynamics;
  
  #if AutoSaveOption 
  /// This operation saves the output of the study to an h5 file in the Output folder
  AnyOperationMacro save = {
        MacroStr={ "classoperation Main.Study.Output " + strquote("Save data") + " --type=Deep" + " --file="+ strquote(ANYBODY_PATH_OUTPUT + ANYBODY_NAME_MAINFILE + ".anydata.h5")};
  };
  #endif
}; 

//#include "RunAppSequence.any"
