 AnyBodyStudy InitStudy =
{
  AnyObjectPtrArray pArr_KneeJnt = 
  ObjSearchRecursive("Main.HumanModel.BodyModel.Right.Leg.Jnt", "Knee", "AnyMechObject");  
  AnyObjectPtrArray pArr_KneeJnt_Re = 
  ObjSearchRecursive("Main.HumanModel.BodyModel.Right.Leg.Jnt.Knee", "*", "AnyMechObject");   
  AnyObjectPtrArray pArr_KneeDrv = 
  ObjSearchRecursive("Main.Model.ModelEnvironmentConnection.Drivers", "KneeDriver*", "AnyMechObject");
  AnyObjectPtrArray pArr_KneeDrv_Re = 
  ObjSearchRecursive("Main.Model.ModelEnvironmentConnection.Drivers.KneeDriverRight", "*", "AnyMechObject");
  AnyObjectPtrArray pArr_Mus = 
  ObjSearchRecursive("Main.HumanModel.BodyModel.Right.Leg.Mus", "*", "AnyMechObject");
  
  AnyObjectPtrArray pArr_Knee = arrcat(arrcat(pArr_KneeJnt, pArr_KneeJnt_Re),arrcat(pArr_KneeDrv, pArr_KneeDrv_Re));
  
  MechObjectExclude = arrcat(pArr_Knee, pArr_Mus) ;    
  
  AnyFolder& Parameters = .Parameters;
  AnyFolder& Model = .Model;
  AnyFolder Drivers_Init = 
  {
    AnyKinEqSimpleDriver KneeJoint_Init_Right = 
    {
      AnyKinLinear lin = 
      {
        AnyRefFrame & ref0 = REF_HUMAN_BODYMODEL.Right.Leg.Seg.Thigh.KneeJoint;
        AnyRefFrame & ref1 = REF_HUMAN_BODYMODEL.Right.Leg.Seg.Shank.KneeJoint;
        Ref = 0;
      };
      AnyKinRotational rot = 
      {
        AnyRefFrame & ref0 = REF_HUMAN_BODYMODEL.Right.Leg.Seg.Thigh.KneeJoint;
        AnyRefFrame & ref1 = REF_HUMAN_BODYMODEL.Right.Leg.Seg.Shank.KneeJoint;
        Type = PlanarAngles;
      };
      DriverPos = {0, -DEF_CUSTOM_KNEE_JOINT_CONTACT_INIT_OFFSET, 0, 0, 0, 0};
      DriverVel = {0, 0, 0, 0, 0, 0};
      Reaction.Type = {Off, Off, Off, Off, Off, Off};
    };  
  };
  
  Gravity = {0, -9.81, 0};
  tStart = 0.0 ;
  tEnd = 1.0 ;
  nStep = 1 ;
  AnyFolder OutputFunctions_Length = {};
};  

AnyDesEvalStudy EvalStudy = 
{
  Analysis =
  {
    AnyOperation& RunInit = ..InitStudy.Kinematics;
  }; 
};

AnyBodyStudy Study = 
{
  AnyFolder &Model = .Model;  
  Gravity={0.0, -9.81, 0.0};
  tEnd = ADL_SQUAT_TIME_PERIOD;
  nStep = round(ADL_SQUAT_TIME_PERIOD*ADL_SQUAT_FRAMES_PER_SECOND+1);
  
  Kinematics.MaxIteration = 50000;
  InitialConditions.MaxIteration = Kinematics.MaxIteration; 
  InverseDynamics.Criterion.Power = DEF_MUSCLE_RECRUITMENT_CRITERION_POWER;
  InverseDynamics.Criterion.PrimaryTerm.Weight_SearchName = "WeightFactor";
  
  #if (BM_LEG_MUSCLES_RIGHT != OFF) & (BM_LEG_MUSCLES_LEFT != OFF)
   AnyObjectPtr pArrExcludedMuscles = arrcat
   (
     Main.HumanModel.BodyModel.Right.Leg.Mus.ExcludedMuscles.Objects,
     Main.HumanModel.BodyModel.Left.Leg.Mus.ExcludedMuscles.Objects
   );  
   MechObjectExclude = pArrExcludedMuscles;
  #endif
  
  #if USE_FDK == 1  
   InverseDynamics.ForceDepKinOnOff=On;
   InverseDynamics.ForceDepKin.SolverType = FDK_SolverType ;
   InverseDynamics.ForceDepKin.ForceTol = FDK_ForceTol ;
   InverseDynamics.ForceDepKin.Perturbation = FDK_Perturbation;
   InverseDynamics.ForceDepKin.MaxIteration = FDK_MaxIteration;
   InverseDynamics.ForceDepKin.MaxNewtonStep = FDK_MaxNewtonStep;       
   InverseDynamics.ForceDepKin.LocalSearchOnOff = FDK_LocalSearchOnOff;      
   InverseDynamics.ForceDepKin.UseAdaptiveForceTolOnOff = FDK_UseAdaptiveForceTolOnOff ;
   
   
   #ifdef USE_FDK_TIBIOFEMORAL
    Main.HumanModel.BodyModel.Right.Leg.Jnt.Knee = 
    {
      Constraints.CType  = {ForceDep, ForceDep, ForceDep, ForceDep, ForceDep};
      Constraints.Reaction.Type = {Off, Off, Off, Off, Off};
    };    
   #endif
   
   #ifdef USE_FDK_PATELLOFEMORAL 
    Main.HumanModel.BodyModel.Right.Leg.Jnt.PatellaFemur = 
    {
      Constraints.CType  = {ForceDep, ForceDep, ForceDep, ForceDep, ForceDep};
      Constraints.Reaction.Type = {Off, Off, Off, Off, Off};    
    };
   #endif
  
  #endif
  
  //Kinematics.SolverType = KinSolOverDeterminate;
  //InitialConditions.SolverType = Kinematics.SolverType;    
  //Kinematics.KinematicTol = 1e-6;
  //InitialConditions.KinematicTol = Kinematics.KinematicTol;
  //Kinematics.Relax = 1/4;
  //InitialConditions.Relax = Kinematics.Relax;    
  //Kinematics.SmallStepAssumptionOnOff = Off;  
};

AnyOperationSequence LigamentCalibrationSequence = 
{
  AnyOperation& EvaluateLigamentLengths = Main.EvalStudy.UpdateDesign;
  AnyOperationMacro UpdateValues = 
  {
    MacroStr = 
    {
      "classoperation Main" + strquote("Update Values")
    };
  };  
};

/**Execute this operation to run the model in the intended operation sequence.  
It is also possible to run operations seperately, by manual selections in the operation tree*/
AnyOperationSequence RunApplication = {
  
  AnyOperation& LigamentCalibrationSequence = .LigamentCalibrationSequence;
  
  /*This operation calibrates the muscles in the model if these are of the type AnyMuscleModel3E.
  This will just be an empty operation if the model is using a muscle type that does not require calibration.*/  
  AnyOperation &CalibrationAnal = Main.HumanModel.Calibration.CalibrationSequence;    
  
  ///This operation is the inverse dynamic analysis
  AnyOperation &InvAnal=Main.Study.InverseDynamics;
  
  #if AutoSaveOption 
  /// This operation saves the output of the study to an h5 file in the Output folder
  AnyOperationMacro save = {
        MacroStr={ "classoperation Main.Study.Output " + strquote("Save data") + " --type=Deep" + " --file="+ strquote(ANYBODY_PATH_OUTPUT + ANYBODY_NAME_MAINFILE + ".anydata.h5")};
  };
  #endif
}; 

//#include "RunAppSequence.any"
